-- Exemple de script pour fichier Json pour faciliter la création de Table / BDD

 "scripts": {
    "dev": "node --watch index.js",
    "db:create": "psql -U tiramisu_oquiz -f ./data/create_tables.sql",
    "db:seed": "psql -U tiramisu_oquiz -f ./data/seed_tables.sql",
    "db:reset": "npm run db:create && npm run db:seed"
  },

-- Exemple de fichier de création de table

BEGIN;
-- lien de la doc : https://www.postgresql.org/docs/current/sql-begin.html
    -- BEGIN déclare le début d'une transaction : un groupe d'instructions SQL qui rend celles-ci dépendantes les unes des autres. Si au moins une des instructions génère une erreur, alors toutes les commandes sont invalidées.
-- ! il faut un commit à la fin pour valider les changements sinon rien ne sera fait

-- Comme c'est un script de création de tables, on s'assure que celles-ci sont bien supprimées avant de les créer.
-- On peut supprimer plusieurs tables en même temps, cela permet de ne pas avoir de soucis de contraintes de clés étrangères.
-- Note : attention à ne pas lancer ce script en production en revanche, car cela supprimerait toutes les données.


-- peu importe l'ordre de suppression des tables, on peut les supprimer dans l'ordre que l'on souhaite car DROP TABLE gère les contraintes de clés étrangères automatiquement si executé en une seule fois
DROP TABLE IF EXISTS "app_user","quiz","quiz_tag","tag","question","difficulty","answer";
-- lien de la doc pour cette bonne pratique, bas de page : https://www.postgresql.org/docs/17/ddl-basics.html

-- Création de la table "user"

CREATE TABLE "app_user"(
    -- lien de la doc : https://www.postgresql.org/docs/17/ddl-identity-columns.html
    -- ici on utilise GENERATED BY DEFAULT AS IDENTITY pour avoir un id auto-incrémenté à chaque insertion PRIMARY KEY gère l'unicité de l'id
    -- BY DEFAULT permet de ne pas avoir à spécifier l'id lors de l'insertion mais on a la possibilité de le faire
    -- pour résumé : on a un id auto-incrémenté qui est unique et on peut le spécifier lors de l'insertion
    "id" INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    -- lien de la doc : https://www.postgresql.org/docs/current/datatype-character.html
    -- text est un type de données qui peut contenir des chaînes de caractères de taille variable
    -- NOT NULL permet de spécifier que la colonne ne peut pas être NULL
    -- UNIQUE permet de spécifier que la colonne ne peut pas contenir de doublons
    -- ici on a un email qui est unique et qui ne peut pas être NULL
    "email" TEXT NOT NULL UNIQUE,
    "name" TEXT NOT NULL,
    "firstname" TEXT NOT NULL,
    "password" TEXT NOT NULL
);

-- création de la table tag
CREATE TABLE tag(
    "id" INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    "name" TEXT NOT NULL UNIQUE
);

-- création de la table difficulty
CREATE TABLE difficulty(
    "id" INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    "name" TEXT NOT NULL UNIQUE
);

-- création de la table quizz
CREATE TABLE quiz(
    "id" INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    "name" TEXT NOT NULL,
    "description" TEXT NOT NULL,
    -- lien de la doc : https://www.postgresql.org/docs/17/ddl-constraints.html#DDL-CONSTRAINTS-FK
    -- ici on a une clé étrangère qui fait référence à la table user
    -- une contrainte de clé étrangère permet de s'assurer que la valeur d'une colonne d'une table est bien présente dans une autre table
    "id_app_user" INTEGER NOT NULL REFERENCES "app_user" ("id")
);
-- création de la table question
CREATE TABLE question(
    "id" INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    "name" TEXT NOT NULL,
    "description" TEXT NOT NULL,
    "id_quiz" INTEGER NOT NULL REFERENCES "quiz" ("id"),
    "id_difficulty" INTEGER NOT NULL REFERENCES "difficulty" ("id")
);
-- creation de la table answer
CREATE TABLE answer(
    "id" INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    "name" TEXT NOT NULL,
    "is_correct" BOOLEAN NOT NULL,
    "id_question" INTEGER NOT NULL REFERENCES "question" ("id")
);
-- création de la table quizz_tag
CREATE TABLE quiz_tag(
    "id_quiz" INTEGER NOT NULL REFERENCES "quiz" ("id"),
    "id_tag" INTEGER NOT NULL REFERENCES "tag" ("id"),
    PRIMARY KEY ("id_quiz", "id_tag")
);

-- COMMIT permet de valider les changements
-- lien de la doc : https://docs.postgresql.fr/13/sql-commit.html
COMMIT;